

(defun accumulate-scores (scores)
  (let* ((length (length scores))
         (out (make-array length :element-type 'double-float))
         (accumulator 0.0d0))
    (do ((i 0 (1+ i)))
        ((>= i length) out)
      (incf accumulator (aref scores i))
      (setf (aref out i) accumulator))))

(defun pick-with-accumulated-scores (accumulated-scores)
  (let* ((length (length accumulated-scores))
         (top (aref accumulated-scores (1- length)))
         (r (random top))
         (a 0)
         (b length))
    (do ()
        ((>= a b) (values a r top))
      (let* ((pivot (floor (/ (+ a b) 2)))
             (pivot-accumulated-score (aref accumulated-scores pivot)))
        (if (< pivot-accumulated-score r)
            (setf a (1+ pivot))
            (setf b pivot))))))
        
(defun pick-with-scores (scores)
  (let ((accumulated-scores (accumulate-scores scores)))
    (pick-with-accumulated-scores accumulated-scores)))

(defun cross (a b)
  (let* ((length-a (length a))
         (length-b (length b))
         (cut-a (1+ (random length-a)))
         (cut-b (random length-b))
         (start-a (subseq a 0 cut-a))
         (end-b (subseq b cut-b length-b)))
    (concatenate 'string start-a end-b)))

(defun mutate-delete-char (a)
  (let* ((length-a (length a))
         (ix (random length-a))
         (start-a (subseq a 0 ix))
         (end-a (subseq a (1+ ix) length-a)))
    (concatenate 'string start-a end-a)))

(defparameter *alphabet* "abcdefghijklmnopqrstuvwxyz0123456789 !\"#$%&'()*+'-./:;<=>?@[\\]^_`")

(defun pick-from-alphabet ()
  (let* ((alphabet-length (length *alphabet*))
         (ix (random alphabet-length)))
    (values (aref *alphabet* ix) ix)))

(defun mutate-add-char (a)
  (let* ((length-a (length a))
         (ix (random length-a))
         (start-a (subseq a 0 ix))
         (middle (vector (pick-from-alphabet)))
         (end-a (subseq a ix length-a)))
    (concatenate 'string start-a middle end-a)))

(defun  mutate-overwrite-char (a)
  (let* ((length-a (length a))
         (ix (random length-a))
         (start-a (subseq a 0 ix))
         (middle (vector (pick-from-alphabet)))
         (end-a (subseq a (1+ ix) length-a)))
    (concatenate 'string start-a middle end-a)))

(defun mutate (a)
  (ecase (random 3)
    (0 (mutate-add-char a))
    (1 (mutate-delete-char a))
    (2 (mutate-overwrite-char a))))

(defun square (a) (* a a))

(defun scan-for-subseq-length (scanner good)
  (let ((good-length (length good)))
    (do ((subseq-length good-length (1- subseq-length)))
        ((= 0 subseq-length) 0)
      (do ((i 0 (1+ i)))
          ((> i (- good-length subseq-length)))
        (when (cl-ppcre:scan scanner (subseq good i (+ i subseq-length)))
          (return-from scan-for-subseq-length subseq-length))))))
        
(defun score (regex goods bads)
  (let ((scanner (cl-ppcre:create-scanner regex)))
    (dolist (bad bads)
      (when (cl-ppcre:scan scanner bad)
        (return-from score 0)))
    (let ((score 0))
      (dolist (good goods (/ score (1+ (length regex))))
        (incf score (square (scan-for-subseq-length scanner good)))))))

(defun generate-n (population scores n)
  (let ((out (make-array n))
        (accumulated-scores (accumulate-scores scores)))
    (dotimes (i n out)
      (let ((a (aref population (pick-with-accumulated-scores accumulated-scores))))
        (setf (aref out i)
              (if (= 0 (random 2))
                  (cross a (aref population (pick-with-accumulated-scores accumulated-scores)))
                  (mutate a)))))))

(defun scores (population goods bads)
  (let* ((length (length population))
         (out (make-array length)))
    (dotimes (i length out)
      (setf (aref out i) (score (aref population i) goods bads)))))

(defun grow-population (population goods bads m n)
  (format t "~A~%~A~%~%" population (scores population goods bads))
  (if (> m 0)
      (grow-population (concatenate 'simple-vector population
                                    (generate-n population (scores population goods bads) n))
                       goods bads (1- m) n)
      population))
      
            
